ans1)
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        val = value;
        left = nullptr;
        right = nullptr;
    }
};

void inorderTraversal(TreeNode* root, vector<int>& values) {
    if (root == nullptr)
        return;

    inorderTraversal(root->left, values);
    values.push_back(root->val);
    inorderTraversal(root->right, values);
}

TreeNode* constructBST(vector<int>& values, int start, int end) {
    if (start > end)
        return nullptr;

    int mid = start + (end - start) / 2;
    TreeNode* root = new TreeNode(values[mid]);

    root->left = constructBST(values, start, mid - 1);
    root->right = constructBST(values, mid + 1, end);

    return root;
}

TreeNode* convertToBST(TreeNode* root) {
    if (root == nullptr)
        return nullptr;

    vector<int> values;
    inorderTraversal(root, values);

    sort(values.begin(), values.end());

    return constructBST(values, 0, values.size() - 1);
}

void inorderPrint(TreeNode* root) {
    if (root == nullptr)
        return;

    inorderPrint(root->left);
    cout << root->val << " ";
    inorderPrint(root->right);
}

int main() {
    // Create the binary tree
    TreeNode* root = new TreeNode(10);
    root->left = new TreeNode(2);
    root->right = new TreeNode(7);
    root->left->left = new TreeNode(8);
    root->left->right = new TreeNode(4);

    cout << "Binary Tree (before conversion to BST): ";
    inorderPrint(root);
    cout << endl;

    // Convert the binary tree to BST
    TreeNode* bstRoot = convertToBST(root);

    cout << "Binary Search Tree (after conversion): ";
    inorderPrint(bstRoot);
    cout << endl;

    return 0;
}


ans2)
#include <iostream>
#include <vector>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        val = value;
        left = nullptr;
        right = nullptr;
    }
};

TreeNode* insertIntoBST(TreeNode* root, int value) {
    if (root == nullptr)
        return new TreeNode(value);

    if (value < root->val)
        root->left = insertIntoBST(root->left, value);
    else if (value > root->val)
        root->right = insertIntoBST(root->right, value);

    return root;
}

TreeNode* findLCA(TreeNode* root, int node1, int node2) {
    if (root == nullptr)
        return nullptr;

    if (root->val > node1 && root->val > node2)
        return findLCA(root->left, node1, node2);

    if (root->val < node1 && root->val < node2)
        return findLCA(root->right, node1, node2);

    return root;
}

int findDistance(TreeNode* root, int value) {
    if (root == nullptr)
        return 0;

    if (root->val == value)
        return 0;

    if (value < root->val)
        return 1 + findDistance(root->left, value);

    return 1 + findDistance(root->right, value);
}

int findDistanceBetweenNodes(TreeNode* root, int node1, int node2) {
    TreeNode* lca = findLCA(root, node1, node2);

    int distNode1 = findDistance(lca, node1);
    int distNode2 = findDistance(lca, node2);

    return distNode1 + distNode2;
}

int main() {
    int n = 9;
    vector<int> values = {8, 3, 1, 6, 4, 7, 10, 14, 13};
    int node1 = 6;
    int node2 = 14;

    TreeNode* root = nullptr;
    for (int i = 0; i < n; i++) {
        root = insertIntoBST(root, values[i]);
    }

    int distance = findDistanceBetweenNodes(root, node1, node2);

    cout << "The distance between the two keys = " << distance << endl;

    return 0;
}


ans3)
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

void convertToDLL(Node* root, Node*& prev, Node*& head) {
    if (root == nullptr)
        return;

    convertToDLL(root->left, prev, head);

    // Modify the pointers
    root->left = prev;
    if (prev != nullptr)
        prev->right = root;
    else
        head = root;

    Node* rightChild = root->right;
    root->right = nullptr;

    prev = root;

    convertToDLL(rightChild, prev, head);
}

void printDLL(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->right;
    }
}

int main() {
    // Create the binary tree
    Node* root = new Node(10);
    root->left = new Node(5);
    root->right = new Node(20);
    root->right->left = new Node(30);
    root->right->right = new Node(35);

    Node* prev = nullptr;
    Node* head = nullptr;
    convertToDLL(root, prev, head);

    cout << "Doubly Linked List (DLL): ";
    printDLL(head);
    cout << endl;

    return 0;
}

ans4)
#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node* nextRight;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
        nextRight = nullptr;
    }
};

void connectNodesAtSameLevel(Node* root) {
    if (root == nullptr)
        return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        int size = q.size();
        Node* prev = nullptr;

        for (int i = 0; i < size; i++) {
            Node* current = q.front();
            q.pop();

            if (prev != nullptr)
                prev->nextRight = current;

            prev = current;

            if (current->left)
                q.push(current->left);

            if (current->right)
                q.push(current->right);
        }

        prev->nextRight = nullptr;
    }
}

void printNextRight(Node* root) {
    while (root != nullptr) {
        cout << root->data << " -> ";
        if (root->nextRight == nullptr)
            cout << "-1";
        root = root->nextRight;
        cout << endl;
    }
}

int main() {
    // Create the binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    connectNodesAtSameLevel(root);

    cout << "Nodes connected at the same level:" << endl;
    printNextRight(root);

    return 0;
}

